вписать 2 раза CHASE при развертывании


// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.28;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/utils/structs/EnumerableSet.sol";

contract WeightedVoting is ERC20 {
    using EnumerableSet for EnumerableSet.AddressSet;

    error TokensClaimed();
    error AllTokensClaimed();
    error NoTokensHeld();
    error QuorumTooHigh();
    error AlreadyVoted();
    error VotingClosed();

    enum Vote { AGAINST, FOR, ABSTAIN }

    struct Issue {
        EnumerableSet.AddressSet voters;
        string issueDesc;
        uint256 quorum;
        uint256 totalVotes;
        uint256 votesFor;
        uint256 votesAgainst;
        uint256 votesAbstain;
        bool passed;
        bool closed;
    }

    struct SerializedIssue {
        address[] voters;
        string issueDesc;
        uint256 quorum;
        uint256 totalVotes;
        uint256 votesFor;
        uint256 votesAgainst;
        uint256 votesAbstain;
        bool passed;
        bool closed;
    }

    Issue[] private issues;
    mapping(address => bool) public tokensClaimed;
    uint256 public constant maxSupply = 1_000_000;
    uint256 public constant claimAmount = 100;

    constructor(string memory name, string memory symbol) ERC20(name, symbol) {
        issues.push(); // Инициализируем пустую запись для нулевого индекса
    }

    function claim() public {
        if (totalSupply() + claimAmount > maxSupply) revert AllTokensClaimed();
        if (tokensClaimed[msg.sender]) revert TokensClaimed();

        _mint(msg.sender, claimAmount);
        tokensClaimed[msg.sender] = true;
    }

    function createIssue(string calldata description, uint256 quorum) external returns (uint256) {
        if (balanceOf(msg.sender) == 0) revert NoTokensHeld();
        if (quorum > totalSupply()) revert QuorumTooHigh();

        Issue storage newIssue = issues.push();
        newIssue.issueDesc = description;
        newIssue.quorum = quorum;
        return issues.length - 1;
    }

    function getIssue(uint256 issueId) external view returns (SerializedIssue memory) {
        Issue storage issue = issues[issueId];
        return SerializedIssue({
            voters: issue.voters.values(),
            issueDesc: issue.issueDesc,
            quorum: issue.quorum,
            totalVotes: issue.totalVotes,
            votesFor: issue.votesFor,
            votesAgainst: issue.votesAgainst,
            votesAbstain: issue.votesAbstain,
            passed: issue.passed,
            closed: issue.closed
        });
    }

    function vote(uint256 issueId, Vote choice) public {
        Issue storage issue = issues[issueId];
        if (issue.closed) revert VotingClosed();
        if (issue.voters.contains(msg.sender)) revert AlreadyVoted();

        uint256 voterTokens = balanceOf(msg.sender);
        if (voterTokens == 0) revert NoTokensHeld();

        if (choice == Vote.AGAINST) {
            issue.votesAgainst += voterTokens;
        } else if (choice == Vote.FOR) {
            issue.votesFor += voterTokens;
        } else {
            issue.votesAbstain += voterTokens;
        }

        issue.voters.add(msg.sender);
        issue.totalVotes += voterTokens;

        if (issue.totalVotes >= issue.quorum) {
            issue.closed = true;
            issue.passed = (issue.votesFor > issue.votesAgainst);
        }
    }
}
