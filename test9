// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract ErrorTriageExercise {
    /**
     * Finds the absolute difference between each uint and its neighbor (a to b, b to c, etc.)
     * and returns an array with the absolute integer difference of each pairing.
     */
    function diffWithNeighbor(
        uint _a,
        uint _b,
        uint _c,
        uint _d
    ) public pure returns (uint[] memory) {
        // Initialize an array to store the differences
        uint[] memory results = new uint[](3);

        // Calculate the absolute difference between each pair of integers and store it in the results array
        results[0] = _a > _b ? _a - _b : _b - _a;
        results[1] = _b > _c ? _b - _c : _c - _b;
        results[2] = _c > _d ? _c - _d : _d - _c;

        // Return the array of differences
        return results;
    }

    /**
     * Adjusts _base by the value of _modifier. Base is always >= 1000. Modifiers can be
     * between positive and negative 100.
     */
    function applyModifier(
        uint _base,
        int _modifier
    ) public pure returns (uint) {
        // Convert _base to int to allow adding int _modifier
        int adjustedBase = int(_base) + _modifier;
        require(adjustedBase >= 0, "Resulting value cannot be negative");

        return uint(adjustedBase);
    }

    /**
     * Pop the last element from the array and return the popped value (unlike the built-in pop function).
     */
    uint[] public arr;

    function popWithReturn() public returns (uint) {
        require(arr.length > 0, "Array is empty");

        // Store the last element
        uint lastElement = arr[arr.length - 1];
        arr.pop(); // Remove the last element from the array
        return lastElement;
    }

    // Utility functions
    function addToArr(uint _num) public {
        arr.push(_num);
    }

    function getArr() public view returns (uint[] memory) {
        return arr;
    }

    function resetArr() public {
        delete arr;
    }
}
