// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

contract ErrorTriageExercise {
    /**
     * Finds the difference between each uint with its neighbor (a to b, b to c, etc.)
     * and returns a uint array with the absolute integer difference of each pairing.
     */
    function diffWithNeighbor(
        uint _a,
        uint _b,
        uint _c,
        uint _d
    ) public pure returns (uint[] memory) {
        uint[] memory results = new uint[](3);

        results[0] = _a - _b;
        results[1] = _b - _c;
        results[2] = _c - _d;

        return results;
    }

    /**
     * Changes the _base by the value of _modifier. Base is always >= 1000. Modifiers can be
     * between positive and negative 100.
     */
    function applyModifier(
        uint _base,
        int _modifier
    ) public pure returns (uint) {
        // Приводим _modifier к uint только если результат не приведет к ошибке
        int modifiedBase = int(_base) + _modifier;
        require(modifiedBase >= 0, "Resulting value cannot be negative");

        return uint(modifiedBase);
    }

    /**
     * Pop the last element from the supplied array and return the popped value (unlike the built-in function)
     */
    uint[] arr;

    function popWithReturn() public returns (uint) {
        require(arr.length > 0, "Array is empty");

        uint lastElement = arr[arr.length - 1];
        arr.pop(); // Используем встроенную функцию pop для удаления последнего элемента
        return lastElement;
    }

    // The utility functions below are working as expected
    function addToArr(uint _num) public {
        arr.push(_num);
    }

    function getArr() public view returns (uint[] memory) {
        return arr;
    }

    function resetArr() public {
        delete arr;
    }
}
