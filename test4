// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

contract ArraysExercise {
    // Инициализируем массив numbers с числами от 1 до 10
    uint[] public numbers = [1,2,3,4,5,6,7,8,9,10];

    // Массивы для хранения отправителей и временных меток
    address[] public senders;
    uint[] public timestamps;

    // Возвращает весь массив numbers
    function getNumbers() public view returns (uint[] memory) {
        return numbers;
    }

    // Сбрасывает массив numbers до начальных значений
    function resetNumbers() public {
        delete numbers;
        numbers = [1,2,3,4,5,6,7,8,9,10];
    }

    // Добавляет элементы из массива _toAppend к массиву numbers
    function appendToNumbers(uint[] calldata _toAppend) public {
        for (uint i = 0; i < _toAppend.length; i++) {
            numbers.push(_toAppend[i]);
        }
    }

    // Сохраняет временную метку и адрес отправителя
    function saveTimestamp(uint _unixTimestamp) public {
        senders.push(msg.sender);
        timestamps.push(_unixTimestamp);
    }

    // Возвращает массивы с временными метками после Y2K и соответствующими адресами
    function afterY2K() public view returns (uint[] memory, address[] memory) {
        uint count;
        for (uint i = 0; i < timestamps.length; i++) {
            if (timestamps[i] > 946702800) {
                count++;
            }
        }

        uint[] memory filteredTimestamps = new uint[](count);
        address[] memory filteredSenders = new address[](count);
        uint j;

        for (uint i = 0; i < timestamps.length; i++) {
            if (timestamps[i] > 946702800) {
                filteredTimestamps[j] = timestamps[i];
                filteredSenders[j] = senders[i];
                j++;
            }
        }
        
        return (filteredTimestamps, filteredSenders);
    }

    // Сбрасывает массив senders
    function resetSenders() public {
        delete senders;
    }

    // Сбрасывает массив timestamps
    function resetTimestamps() public {
        delete timestamps;
    }
}
