// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

// IERC20 Interface integrated directly into the contract to avoid import issues
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
}

contract TokenAuctionAndRewardPool {
    IERC20 public USDC = IERC20(0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913);
    IERC20 public WSTETH = IERC20(0xc1CBa3fCea344f92D9239c08C0568f6F2F0ee452);
    IERC20 public DAI = IERC20(0x9735fb1126B521A913697A541f768376011bCcF9);
    IERC20 public AERO = IERC20(0x940181a94A35A4569E4529A3CDfB74e38FD98631);
    IERC20 public SUPER_OETHB = IERC20(0xDBFeFD2e8460a6Ee4955A68582F85708BAEA60A3);
    IERC20 public W = IERC20(0xB0fFa8000886e57F86dd5264b9582b2Ad87b2b91);

    struct CollateralAuction {
        address token;
        uint256 amount;
        uint256 unlockTime;
        address owner;
        bool isActive;
    }

    // Список всех залогов для аукциона
    CollateralAuction[] public collateralAuctions;

    // Mapping from user address to reward balance in the pool
    mapping(address => uint256) public poolBalances;
    uint256 public totalPoolBalance;

    event CollateralDeposited(uint256 auctionId, address indexed user, address token, uint256 amount, uint256 unlockTime);
    event CollateralAuctioned(uint256 auctionId, address indexed buyer, address token, uint256 amount);
    event RewardsDistributed(address indexed token, uint256 totalReward);

    // Функция для внесения залога на аукцион
    function depositCollateralForAuction(address token, uint256 amount, uint256 unlockTime) external {
        require(amount > 0, "Amount must be greater than zero");
        
        IERC20(token).transferFrom(msg.sender, address(this), amount);

        collateralAuctions.push(CollateralAuction({
            token: token,
            amount: amount,
            unlockTime: unlockTime,
            owner: msg.sender,
            isActive: true
        }));

        emit CollateralDeposited(collateralAuctions.length - 1, msg.sender, token, amount, unlockTime);
    }

    // Функция для участия в аукционе и покупки залога
    function buyCollateral(uint256 auctionId) external {
        CollateralAuction storage auction = collateralAuctions[auctionId];
        require(auction.isActive, "Auction is not active");
        require(block.timestamp >= auction.unlockTime, "Auction not available yet");

        uint256 amount = auction.amount;
        address token = auction.token;
        auction.isActive = false;

        IERC20(token).transfer(msg.sender, amount);
        emit CollateralAuctioned(auctionId, msg.sender, token, amount);
    }

    // Функция для внесения токенов в пул
    function depositToPool(address token, uint256 amount) external {
        require(amount > 0, "Amount must be greater than zero");

        IERC20(token).transferFrom(msg.sender, address(this), amount);
        poolBalances[msg.sender] += amount;
        totalPoolBalance += amount;
    }

    // Функция для распределения награды между всеми участниками пула
    function distributeRewards(address rewardToken, uint256 totalReward) external {
        require(totalPoolBalance > 0, "No pool balance to distribute rewards");
        
        IERC20(rewardToken).transferFrom(msg.sender, address(this), totalReward);

        for (uint256 i = 0; i < collateralAuctions.length; i++) {
            address participant = collateralAuctions[i].owner;
            uint256 userShare = (poolBalances[participant] * totalReward) / totalPoolBalance;
            IERC20(rewardToken).transfer(participant, userShare);
        }

        emit RewardsDistributed(rewardToken, totalReward);
    }

    // Функция для пожертвования с пропорциональным распределением среди участников пула
    function donateWithDistribution(address token, uint256 donationAmount) external {
        require(totalPoolBalance > 0, "No participants to distribute donation");

        IERC20(token).transferFrom(msg.sender, address(this), donationAmount);

        for (uint256 i = 0; i < collateralAuctions.length; i++) {
            address participant = collateralAuctions[i].owner;
            uint256 userShare = (poolBalances[participant] * donationAmount) / totalPoolBalance;
            IERC20(token).transfer(participant, userShare);
        }
    }

    // Функция для проверки активных залогов
    function getActiveAuctions() external view returns (CollateralAuction[] memory) {
        uint256 count;
        for (uint256 i = 0; i < collateralAuctions.length; i++) {
            if (collateralAuctions[i].isActive) {
                count++;
            }
        }
        
        CollateralAuction[] memory activeAuctions = new CollateralAuction[](count);
        uint256 j;
        for (uint256 i = 0; i < collateralAuctions.length; i++) {
            if (collateralAuctions[i].isActive) {
                activeAuctions[j] = collateralAuctions[i];
                j++;
            }
        }
        return activeAuctions;
    }
}
