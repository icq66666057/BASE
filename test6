// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

/**
 * @title GarageManager
 * @dev Contract to manage a collection of cars for each user
 */
contract GarageManager {
    // Mapping to store each user's garage of cars
    mapping(address => Car[]) private userGarages;

    // Struct representing a car
    struct Car {
        string make; // Brand of the car
        string model; // Model of the car
        string color; // Color of the car
        uint numberOfDoors; // Number of doors on the car
    }

    // Custom error to handle invalid car index
    error InvalidCarIndex(uint256 index);

    /**
     * @dev Adds a new car to the user's garage
     * @param make The make of the car
     * @param model The model of the car
     * @param color The color of the car
     * @param numberOfDoors The number of doors of the car
     */
    function addCar(string memory make, string memory model, string memory color, uint numberOfDoors) external {
        // Add a new car with the provided details to the user's garage
        userGarages[msg.sender].push(Car(make, model, color, numberOfDoors));
    }

    /**
     * @dev Retrieves the list of cars for the caller
     * @return An array of `Car` structs owned by the caller
     */
    function getMyCars() external view returns (Car[] memory) {
        return userGarages[msg.sender];
    }

    /**
     * @dev Retrieves the list of cars for a specified user
     * @param user The address of the user
     * @return An array of `Car` structs owned by the specified user
     */
    function getUserCars(address user) external view returns (Car[] memory) {
        return userGarages[user];
    }

    /**
     * @dev Updates a specific car in the caller's garage
     * @param index The index of the car in the user's garage array
     * @param make The new make of the car
     * @param model The new model of the car
     * @param color The new color of the car
     * @param numberOfDoors The new number of doors of the car
     */
    function updateCar(uint256 index, string memory make, string memory model, string memory color, uint numberOfDoors) external {
        // Check if the provided index is valid
        if (index >= userGarages[msg.sender].length) {
            revert InvalidCarIndex(index); // Revert with custom error if the index is invalid
        }
        // Update the specified car with the new details
        userGarages[msg.sender][index] = Car(make, model, color, numberOfDoors);
    }

    /**
     * @dev Resets the caller's garage, removing all cars
     */
    function resetMyGarage() external {
        delete userGarages[msg.sender];
    }
}
